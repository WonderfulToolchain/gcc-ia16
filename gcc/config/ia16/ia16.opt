march=any
Target RejectNegative Var(target_arch,PROCESSOR_ANY) Init(PROCESSOR_ANY)
Produce code that works on any CPU, with generic tuning options (default).

march=any_186
Target RejectNegative Var(target_arch,PROCESSOR_ANY_186)
Use features available on both Intel 80186 and NEC V20 or better.

march=i8086
Target RejectNegative Var(target_arch,PROCESSOR_I8086)
Use features of and optimize code for the Intel 8086.

march=i8088
Target RejectNegative Var(target_arch,PROCESSOR_I8088)
Use features of and optimize code for the Intel 8088.

march=v30
Target RejectNegative Var(target_arch,PROCESSOR_NEC_V30)
Use features of and optimize code for the NEC V30.

march=v20
Target RejectNegative Var(target_arch,PROCESSOR_NEC_V20)
Use features of and optimize code for the NEC V20.

march=i80186
Target RejectNegative Var(target_arch,PROCESSOR_I80186)
Use features of and optimize code for the Intel 80186.

march=i80188
Target RejectNegative Var(target_arch,PROCESSOR_I80188)
Use features of and optimize code for the Intel 80188.

march=i80286
Target RejectNegative Var(target_arch,PROCESSOR_I80286)
Use features of and optimize code for the Intel 80286.

mtune=i8086
Target RejectNegative Var(target_tune,PROCESSOR_I8086) Init(PROCESSOR_ANY)
Optimize code for the Intel 8086.

mtune=i8088
Target RejectNegative Var(target_tune,PROCESSOR_I8088)
Optimize code for the Intel 8088.

mtune=v30
Target RejectNegative Var(target_tune,PROCESSOR_NEC_V30)
Optimize code for the NEC V30.

mtune=v20
Target RejectNegative Var(target_tune,PROCESSOR_NEC_V20)
Optimize code for the NEC V20.

mtune=i80186
Target RejectNegative Var(target_tune,PROCESSOR_I80186)
Optimize code for the Intel 80186.

mtune=i80188
Target RejectNegative Var(target_tune,PROCESSOR_I80188)
Optimize code for the Intel 80188.

mtune=i80286
Target RejectNegative Var(target_tune,PROCESSOR_I80286)
Optimize code for the Intel 80286.

mshort-jumps
Target Mask(SHORT_JUMPS)
Do (not - this is the default) use jump instructions which can only jump -128/+127 bytes.

mseparate-code-segment
Target Mask(SEPARATE_CSEG)
Do (not - this is the default) use a separate code segment.

mcmodel=tiny
Target RejectNegative
Generate code for the tiny code model (default), with one combined data and text segment.

; For the compiler back-end, -mcmodel=small in contrast to -mcmodel=tiny is
; just about having separate code and data address spaces.  Most of the work
; for implementing the small model happens at the linking stage.
mcmodel=small
Target RejectNegative Mask(SEPARATE_CSEG) Mask(CMODEL_IS_SMALL)
Generate code for the small code model, with one data and one text segment.

mrtd
Target Report Mask(RTD)
Alternate calling convention (callee pops arguments).
