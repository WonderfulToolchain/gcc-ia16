march=any
Target RejectNegative Var(target_arch,PROCESSOR_ANY) Init(PROCESSOR_ANY)
Produce code that works on any CPU, with generic tuning options (default).

march=any_186
Target RejectNegative Var(target_arch,PROCESSOR_ANY_186)
Use features available on both Intel 80186 and NEC V20 or better.

march=i8086
Target RejectNegative Var(target_arch,PROCESSOR_I8086)
Use features of and optimize code for the Intel 8086.

march=i8088
Target RejectNegative Var(target_arch,PROCESSOR_I8088)
Use features of and optimize code for the Intel 8088.

march=v30
Target RejectNegative Var(target_arch,PROCESSOR_NEC_V30)
Use features of and optimize code for the NEC V30.

march=v20
Target RejectNegative Var(target_arch,PROCESSOR_NEC_V20)
Use features of and optimize code for the NEC V20.

march=i80186
Target RejectNegative Var(target_arch,PROCESSOR_I80186)
Use features of and optimize code for the Intel 80186.

march=i186
Target RejectNegative Alias(march=i80186)
Use features of and optimize code for the Intel 80186.

march=i80188
Target RejectNegative Var(target_arch,PROCESSOR_I80188)
Use features of and optimize code for the Intel 80188.

march=i188
Target RejectNegative Alias(march=i80188)
Use features of and optimize code for the Intel 80188.

march=i80286
Target RejectNegative Var(target_arch,PROCESSOR_I80286)
Use features of and optimize code for the Intel 80286.

march=i286
Target RejectNegative Alias(march=i80286)
Use features of and optimize code for the Intel 80286.

mtune=i8086
Target RejectNegative Var(target_tune,PROCESSOR_I8086) Init(PROCESSOR_ANY)
Optimize code for the Intel 8086.

mtune=i8088
Target RejectNegative Var(target_tune,PROCESSOR_I8088)
Optimize code for the Intel 8088.

mtune=v30
Target RejectNegative Var(target_tune,PROCESSOR_NEC_V30)
Optimize code for the NEC V30.

mtune=v20
Target RejectNegative Var(target_tune,PROCESSOR_NEC_V20)
Optimize code for the NEC V20.

mtune=i80186
Target RejectNegative Var(target_tune,PROCESSOR_I80186)
Optimize code for the Intel 80186.

mtune=i186
Target RejectNegative Alias(mtune=i80186)
Optimize code for the Intel 80186.

mtune=i80188
Target RejectNegative Var(target_tune,PROCESSOR_I80188)
Optimize code for the Intel 80188.

mtune=i188
Target RejectNegative Alias(mtune=i80188)
Optimize code for the Intel 80188.

mtune=i80286
Target RejectNegative Var(target_tune,PROCESSOR_I80286)
Optimize code for the Intel 80286.

mtune=i286
Target RejectNegative Alias(mtune=i80286)
Optimize code for the Intel 80286.

mshort-jumps
Target Mask(SHORT_JUMPS)
Do (not - this is the default) use jump instructions which can only jump -128/+127 bytes.

; This is now unified with -mcmodel=small (below).
mseparate-code-segment
Target RejectNegative Alias(mcmodel=small) Undocumented

mcmodel=tiny
Target RejectNegative Var(target_cmodel,CMODEL_TINY) Init(CMODEL_TINY)
Generate code for the tiny code model (default), with one combined data and text segment.

; For the compiler back-end, -mcmodel=small in contrast to -mcmodel=tiny is
; mainly just about having separate code and data address spaces.  Most of
; the work for implementing the small model happens at the linking stage.
;
; With the help of elf.h, this option also enables -msegment-relocation-stuff.
mcmodel=small
Target RejectNegative Var(target_cmodel,CMODEL_SMALL)
Generate code for the small code model, with one data and one text segment.

msegment-relocation-stuff
Target RejectNegative Mask(SEG_RELOC_STUFF) Undocumented

mno-segment-relocation-stuff
Target RejectNegative InverseMask(SEG_RELOC_STUFF)
Disable language features which use segment relocations.

mcdecl
Target RejectNegative Report Var(target_call_parm_cvt,CALL_PARM_CVT_CDECL) Init(CALL_PARM_CVT_CDECL) Undocumented

mrtd
Target RejectNegative Report Var(target_call_parm_cvt,CALL_PARM_CVT_STDCALL)
Alternate calling convention (callee pops arguments).

mstdcall
Target RejectNegative Alias(mrtd) Undocumented

mregparmcall
Target RejectNegative Report Var(target_call_parm_cvt,CALL_PARM_CVT_REGPARMCALL)
Alternate calling convention (some arguments in registers; callee pops rest).

mno-callee-assume-ds-data-segment
Target RejectNegative Report Mask(NO_ASSUME_DS_DATA)
Alternate calling convention (callee cannot assume %ds points to program's data segment on entry).

mcallee-assume-ds-data-segment
Target RejectNegative InverseMask(NO_ASSUME_DS_DATA, ASSUME_DS_DATA) Undocumented

; Older name.
mcallee-assume-ds-ss
Target Alias(mcallee-assume-ds-data-segment) Undocumented

; Older name.
mcallee-assume-ds-data-space
Target Alias(mcallee-assume-ds-data-segment) Undocumented

mno-far-function-if-far-return-type
Target RejectNegative Report Mask(NO_FAR_FUNCTION_IF_FAR_RETURN_TYPE)
Do not treat a function as __far even if it has a __far return type.

mfar-function-if-far-return-type
Target RejectNegative InverseMask(NO_FAR_FUNCTION_IF_FAR_RETURN_TYPE, FAR_FUNCTION_IF_FAR_RETURN_TYPE) Undocumented

mprotected-mode
Target Report Mask(PROTECTED_MODE)
Try to produce code suitable for running in protected mode.

; With the help of elf.h, this also enables -mprotected-mode.
melks
Target Report RejectNegative Mask(SYS_ELKS)
Generate executables for ELKS OS (experimental).

; With the help of elf.h, this also enables -melks (and -mprotected-mode).
melks-libc
Target Report RejectNegative Mask(SYS_ELKS)
Generate executables for ELKS OS, and link with elks-libc (experimental).

mmsdos
Target Report RejectNegative InverseMask(SYS_ELKS, SYS_MSDOS)
Generate executables for MS-DOS (default).

mmsdos-handle-v1
Target Report RejectNegative InverseMask(SYS_ELKS, SYS_MSDOS)
Generate MS-DOS executables which fail gracefully on DOS v1.x (experimental).

; With the help of elf.h, this also enables -mprotected-mode.
mdpmiable
Target Report Mask(DPMIABLE)
Generate MS-DOS executables which use DPMI if present (experimental).

mnewlib-nano-stdio
Target Mask(NEWLIB_NANO_STDIO)
Link with Newlib's limited formatted I/O routines (experimental).

mnewlib-autofloat-stdio
Target Mask(NEWLIB_AUTOFLOAT_STDIO)
Automatically decide between floating-point and non-fp formatted I/O routines (experimental).

; This is currently a no-op option.  It may come in useful if and when ELKS
; supports more than one executable format.
maout
Target RejectNegative Undocumented

maout-total=
Target RejectNegative Joined UInteger
Set the top of the data segment for ELKS OS executables.
